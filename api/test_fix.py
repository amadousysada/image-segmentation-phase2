#!/usr/bin/env python3
"""
Script de test pour v√©rifier que la correction fonctionne
"""

def test_hierarchical_transformer_fix():
    """Test de la correction HierarchicalTransformerEncoder"""
    
    # Simuler la configuration probl√©matique qu'on re√ßoit du mod√®le sauv√©
    problematic_config = {
        'name': 'hierarchical_encoder_0_0',
        'trainable': False,
        'dtype': 'float32',
        'project_dim': 64,
        'num_heads': 1,
        'drop_prop': 0.0,
        'sr_ratio': 1,
        # Le probl√®me : objet mlp s√©rialis√© complexe
        'mlp': {
            'module': 'keras_hub.src.models.mit.mit_layers',
            'class_name': 'MixFFN',
            'config': {
                'channels': 64,
                'mid_channels': 256,
                'trainable': False,
                'dtype': 'float32'
            }
        }
    }
    
    # Test de notre version corrig√©e
    print("üß™ Test de la correction HierarchicalTransformerEncoder")
    print(f"Config probl√©matique re√ßue: {list(problematic_config.keys())}")
    
    try:
        # Simuler notre correction
        clean_config = problematic_config.copy()
        problematic_params = ['mlp', 'drop_prop']
        
        for param in problematic_params:
            if param in clean_config:
                print(f"  - Suppression du param√®tre probl√©matique: {param}")
                clean_config.pop(param)
        
        # Simuler la cr√©ation avec les param√®tres nettoy√©s
        cleaned_params = {
            'project_dim': clean_config.get('project_dim', 64),
            'num_heads': clean_config.get('num_heads', 1),
            'sr_ratio': clean_config.get('sr_ratio', 1),
            'drop_prob': problematic_config.get('drop_prop', 0.0),  # R√©cup√©rer drop_prop original
        }
        
        print(f"  - Param√®tres nettoy√©s pour cr√©ation: {cleaned_params}")
        print("‚úÖ Correction r√©ussie - la couche peut √™tre recr√©√©e")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans la correction: {e}")
        return False

def test_custom_objects():
    """Test que nos objets personnalis√©s sont bien d√©finis"""
    print("\nüß™ Test des objets personnalis√©s")
    
    try:
        from keras_compat import get_corrected_custom_objects
        custom_objects = get_corrected_custom_objects()
        
        expected_objects = [
            "MeanIoUArgmax",
            "MixFFN", 
            "OverlappingPatchingAndEmbedding",
            "HierarchicalTransformerEncoder"
        ]
        
        for obj_name in expected_objects:
            if obj_name in custom_objects:
                print(f"  ‚úì {obj_name} pr√©sent")
            else:
                print(f"  ‚úó {obj_name} manquant")
                return False
        
        print("‚úÖ Tous les objets personnalis√©s sont pr√©sents")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur dans les objets personnalis√©s: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("=== TEST DE LA CORRECTION KERAS ===\n")
    
    success1 = test_hierarchical_transformer_fix()
    success2 = test_custom_objects()
    
    print(f"\n=== R√âSULTAT ===")
    if success1 and success2:
        print("üéâ Tous les tests passent - la correction devrait fonctionner !")
    else:
        print("‚ö†Ô∏è  Certains tests √©chouent - v√©rifiez la configuration")

if __name__ == "__main__":
    main()